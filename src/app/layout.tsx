"use client"
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
// import '@radix-ui/themes/styles.css';
import { ThemeProvider } from "./components/ThemeProvider";
import Header from "./components/Header";
import Footer from "./components/Footer";
import AppLayout from "./authGuard/AppLayout";
import Layout from "./authGuard/Layout";
import { usePathname } from "next/navigation";
import { getCookie, hasCookie, setCookie } from "cookies-next";
import { createContext, useEffect, useState } from "react"




const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
export const AuthContext = createContext({})

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const pathName = usePathname()
  // let authenticated = hasCookie("authToken")

  const [authenticated, setAuthenticated] = useState(Boolean(hasCookie("authToken")))

  useEffect(() => {
    let cookiess = hasCookie("authToken")
    setAuthenticated(Boolean(cookiess))
    console.log("gdfgdfgdfgdffffffffffffffffffffffffffffffff");
  }, [hasCookie("authToken"), authenticated])




  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body id="layout">
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {/* <div className="flex min-h-screen w-full flex-col"> */}
          {/* {!pathName.includes('auth/') && <Header />} */}
          {/* <main className={`${pathName.includes('auth') ? "" : "flex min-h-[calc(100vh_-_theme(spacing.16))] flex-1 flex-col gap-4 bg-muted/40 p-4 md:gap-8 md:p-10 container"}`}>
            {children}
          </main>
          {!pathName.includes('auth') && <Footer />} */}

          {/* </div> */}
          {
            <AuthContext.Provider value={{ authenticated }}>
              <Layout  >{children}</Layout>
            </AuthContext.Provider>
          }
        </ThemeProvider>
      </body>
    </html>
  );
}
